//// ------------------------------------------------------
//// THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
//// ------------------------------------------------------

Table users {
  id String [pk]
  name String [not null]
  email String [unique, not null]
  emailVerified DateTime
  password String
  isUMTMembership Boolean [default: false]
  sex String
  age Int
  image String
  facebookLink String
  twitterLink String
  instagramLink String
  githubLink String
  dribbbleLink String
  youtubeLink String
  telegramLink String
  tiktokLink String
  redditLink String
  snapchatLink String
  about String
  faculty String
  major String
  year String
  cgpa Float
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  Comment comments [not null]
  Follower follows [not null]
  Following follows [not null]
  Community communities [not null]
  CommunityMember community_members [not null]
  account Account [not null]
  session Session [not null]
}

Table follows {
  id String [pk]
  followerId String [not null]
  followingId String [not null]
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  follower users [not null]
  following users [not null]
}

Table comments {
  id String [pk]
  content String [not null]
  userId String [not null]
  threadId String [not null]
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  user users [not null]
}

Table communities {
  id String [pk]
  name String [not null]
  image String
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  creatorId String [not null]
  creator users [not null]
  CommunityMember community_members [not null]
}

Table community_members {
  id String [pk]
  communityId String [not null]
  userId String [not null]
  role Role [not null, default: 'USER']
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  community communities [not null]
  user users [not null]
}

Table images {
  id String [pk]
  imageUrl String [not null]
  threadId String [not null]
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
}

Table Account {
  id String [pk]
  userId String [not null]
  type String [not null]
  provider String [not null]
  providerAccountId String [not null]
  refresh_token String
  access_token String
  expires_at Int
  token_type String
  scope String
  id_token String
  session_state String
  user users [not null]

  indexes {
    (provider, providerAccountId) [unique]
  }
}

Table commentvotes {
  user_id String [not null]
  thread_id String [not null]
  vote commentvotes_vote [not null]
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]

  indexes {
    (user_id, thread_id) [pk]
    (user_id, thread_id) [unique]
  }
}

Table Session {
  id String [pk]
  sessionToken String [unique, not null]
  userId String [not null]
  expires DateTime [not null]
  user users [not null]
}

Table thread {
  id String [pk]
  title String [not null]
  description String
  authorId String
  flag thread_flag [not null, default: 'PUBLIC']
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]
  communityId String
}

Table threadvotes {
  user_id String [not null]
  thread_id String [not null]
  vote threadvotes_vote [not null]
  created_at DateTime [default: `now()`, not null]
  updated_at DateTime [default: `now()`, not null]

  indexes {
    (user_id, thread_id) [pk]
  }
}

Table VerificationToken {
  identifier String [not null]
  token String [unique, not null]
  expires DateTime [not null]

  indexes {
    (identifier, token) [unique]
  }
}

Enum Role {
  USER
  MODERATOR
  ADMIN
}

Enum threadvotes_vote {
  UPVOTE
  DOWNVOTE
}

Enum commentvotes_vote {
  UPVOTE
  DOWNVOTE
}

Enum thread_flag {
  PUBLIC
  PRIVATE
  REPORTED
}

Ref: follows.followerId > users.id

Ref: follows.followingId > users.id

Ref: comments.userId > users.id

Ref: communities.creatorId > users.id

Ref: community_members.communityId > communities.id

Ref: community_members.userId > users.id

Ref: Account.userId > users.id [delete: Cascade]

Ref: Session.userId > users.id [delete: Cascade]