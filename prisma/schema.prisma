generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  emailVerified       DateTime?
  password            String?
  isUMTMembership     Boolean?              @default(false)
  sex                 String?
  age                 Int?
  image               String?
  coverImage          String?
  facebookLink        String?
  twitterLink         String?
  instagramLink       String?
  githubLink          String?
  dribbbleLink        String?
  youtubeLink         String?
  telegramLink        String?
  tiktokLink          String?
  redditLink          String?
  snapchatLink        String?
  about               String?
  faculty             String?
  major               String?
  year                Float?
  cgpa                Float?
  created_at          DateTime              @default(now()) @map("created_at")
  updated_at          DateTime              @default(now()) @updatedAt @map("updated_at")
  Comment             Comment[]
  Follower            Follow[]              @relation("follower")
  Following           Follow[]              @relation("following")
  Community           Community[]
  CommunityMember     CommunityMember[]
  account             Account[]
  session             Session[]
  Message             Message[]
  ChannelParticipants ChannelParticipants[]
  resetTokens         ResetToken[]
  threadvotes         Thread_votes[]
  commentvotes        CommentVotes[]
}

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Follow {
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Comment {
  id           String         @id @default(uuid())
  content      String         @db.LongText
  userId       String         @map("user_id")
  threadId     String         @map("thread_id")
  parentId     String         @map("parent_id")
  created_at   DateTime       @default(now()) @map("created_at")
  updated_at   DateTime       @default(now()) @updatedAt @map("updated_at")
  user         User           @relation(fields: [userId], references: [id])
  commentvotes CommentVotes[]
  Images       Images[]

  @@index([threadId])
  @@index([userId])
}

model Community {
  id              String            @id @default(uuid())
  name            String            @unique
  avatar          String
  description     String            @db.Text
  banner          String
  created_at      DateTime          @default(now()) @map("created_at")
  updated_at      DateTime          @default(now()) @updatedAt @map("updated_at")
  creatorId       String            @map("creator_id")
  creator         User              @relation(fields: [creatorId], references: [id])
  CommunityMember CommunityMember[]
  CommunityRules  CommunityRules[]
  Threads         Threads[]

  @@index([creatorId])
}

model CommunityMember {
  communityId String    @map("community_id")
  userId      String    @map("user_id")
  role        Role      @default(USER)
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @default(now()) @updatedAt @map("updated_at")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([communityId, userId])
  @@unique([communityId, userId])
  @@index([communityId])
  @@index([userId])
}

model CommunityRules {
  id          String    @id @default(uuid())
  communityId String    @map("community_id")
  rule        String
  description String    @db.Text
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @default(now()) @updatedAt @map("updated_at")
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([communityId])
}

model Images {
  id         String   @id
  imageUrl   String   @db.Text
  thread     Threads? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  comment    Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  threadId   String?  @map("thread_id")
  commentId  String?  @map("comment_id")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([threadId])
  @@index([commentId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model CommentVotes {
  user       User               @relation(fields: [user_id], references: [id])
  comment    Comment            @relation(fields: [comment_id], references: [id])
  user_id    String
  comment_id String
  vote       Commentvotes_vote?
  created_at DateTime           @default(now())
  updated_at DateTime           @default(now())

  @@unique([user_id, comment_id])
  @@index([comment_id], map: "commentVotes_comment_id_idx")
  @@index([user_id], map: "commentVotes_user_id_idx")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Threads {
  id          String         @id @default(uuid())
  title       String
  description String?        @db.LongText
  authorId    String?
  flag        Thread_flag    @default(PUBLIC)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now())
  community   Community?     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String?
  threadvotes Thread_votes[]
  Images      Images[]

  @@index([authorId], map: "Thread_authorId_idx")
  @@index([communityId], map: "Thread_communityId_idx")
}

model Thread_votes {
  user       User             @relation(fields: [user_id], references: [id])
  thread     Threads          @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  vote       Threadvotes_vote
  user_id    String
  thread_id  String
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())

  @@id([user_id, thread_id])
  @@index([thread_id], map: "threadVotes_thread_id_idx")
  @@index([user_id], map: "threadVotes_user_id_idx")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Channel {
  id                  String                @id @default(uuid())
  isGroup             Boolean               @default(false)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now())
  Message             Message[]
  ChannelParticipants ChannelParticipants[]
}

model ChannelParticipants {
  channelId  String   @map("channel_id")
  userId     String   @map("user_id")
  channel    Channel  @relation(fields: [channelId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([channelId, userId])
  @@index([userId], map: "channel_participants_user_id_idx")
  @@index([channelId], map: "channel_participants_channel_id_idx")
}

model Message {
  id         String   @id @default(uuid())
  content    String
  channelId  String   @map("channel_id")
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String   @map("sender_id")

  @@index([channelId], map: "messages_channel_id_idx")
  @@index([senderId], map: "messages_sender_id_idx")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum Threadvotes_vote {
  UPVOTE
  DOWNVOTE
}

enum Commentvotes_vote {
  UPVOTE
  DOWNVOTE
}

enum Thread_flag {
  PUBLIC
  PRIVATE
  REPORTED
}
