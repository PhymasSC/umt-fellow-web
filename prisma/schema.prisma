generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  emailVerified   DateTime?
  password        String?
  isUMTMembership Boolean?          @default(false)
  sex             String?
  age             Int?
  image           String?
  facebookLink    String?
  twitterLink     String?
  instagramLink   String?
  githubLink      String?
  dribbbleLink    String?
  youtubeLink     String?
  telegramLink    String?
  tiktokLink      String?
  redditLink      String?
  snapchatLink    String?
  about           String?
  faculty         String?
  major           String?
  year            String?
  cgpa            Float?
  lastLogin       DateTime?
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  Thread          Thread[]
  Comment         Comment[]
  Follower        Follow[]          @relation("follower")
  Following       Follow[]          @relation("following")
  Vote            Vote[]
  Community       Community[]
  CommunityMember CommunityMember[]
  accounts        Account[]
  sessions        Session[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id          String     @id @default(uuid())
  title       String
  content     String?
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  flag        Flag       @default(PUBLIC)
  Vote        Vote[]
  Comment     Comment[]
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?

  @@index([authorId])
  @@index([communityId])
}

enum Flag {
  PUBLIC
  PRIVATE
  REPORTED
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String   @map(name: "follower_id")
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String   @map(name: "following_id")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  @@index([followerId])
  @@index([followingId])
  @@map(name: "follows")
}

model Vote {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map(name: "user_id")
  thread    Thread?  @relation(fields: [threadId], references: [id])
  threadId  String?  @map(name: "thread_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @map(name: "comment_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@index([threadId])
  @@index([userId])
  @@index([commentId])
  @@map(name: "votes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map(name: "user_id")
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  String   @map(name: "thread_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  Vote      Vote[]

  @@index([threadId])
  @@index([userId])
  @@map(name: "comments")
}

model Community {
  id              String            @id @default(uuid())
  name            String
  image           String?
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @updatedAt @map(name: "updated_at")
  creator         User              @relation(fields: [creatorId], references: [id])
  creatorId       String            @map(name: "creator_id")
  Thread          Thread[]
  CommunityMember CommunityMember[]

  @@index([creatorId])
  @@map(name: "communities")
}

model CommunityMember {
  id          String    @id @default(uuid())
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map(name: "user_id")
  role        Role      @default(USER)
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @updatedAt @map(name: "updated_at")

  @@index([communityId])
  @@index([userId])
  @@map(name: "community_members")
}
