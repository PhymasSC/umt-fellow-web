generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  emailVerified   DateTime?
  password        String?
  isUMTMembership Boolean?          @default(false)
  sex             String?
  age             Int?
  image           String?
  facebookLink    String?
  twitterLink     String?
  instagramLink   String?
  githubLink      String?
  dribbbleLink    String?
  youtubeLink     String?
  telegramLink    String?
  tiktokLink      String?
  redditLink      String?
  snapchatLink    String?
  about           String?
  faculty         String?
  major           String?
  year            String?
  cgpa            Float?
  created_at      DateTime          @default(now()) @map("created_at")
  updated_at      DateTime          @default(now()) @updatedAt @map("updated_at")
  Comment         Comment[]
  Follower        Follow[]          @relation("follower")
  Following       Follow[]          @relation("following")
  Community       Community[]
  CommunityMember CommunityMember[]

  @@map("users")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @default(now()) @updatedAt @map("updated_at")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])

  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  userId     String   @map("user_id")
  threadId   String   @map("thread_id")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")
  user       User     @relation(fields: [userId], references: [id])

  @@index([threadId])
  @@index([userId])
  @@map("comments")
}

model Community {
  id              String            @id @default(uuid())
  name            String
  image           String?
  created_at      DateTime          @default(now()) @map("created_at")
  updated_at      DateTime          @default(now()) @updatedAt @map("updated_at")
  creatorId       String            @map("creator_id")
  creator         User              @relation(fields: [creatorId], references: [id])
  CommunityMember CommunityMember[]

  @@index([creatorId])
  @@map("communities")
}

model CommunityMember {
  id          String    @id @default(uuid())
  communityId String    @map("community_id")
  userId      String    @map("user_id")
  role        Role      @default(USER)
  created_at  DateTime  @default(now()) @map("created_at")
  updated_at  DateTime  @default(now()) @updatedAt @map("updated_at")
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([communityId])
  @@index([userId])
  @@map("community_members")
}

model Images {
  id         String   @id @default(uuid())
  imageUrl   String   @db.Text
  threadId   String   @map("thread_id")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([threadId])
  @@map("images")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
}

model commentvotes {
  user_id    String
  thread_id  String
  vote       commentvotes_vote
  created_at DateTime          @default(now())
  updated_at DateTime          @default(now())

  @@id([user_id, thread_id])
  @@unique([user_id, thread_id], map: "commentVotes_user_id_thread_id_key")
  @@index([thread_id], map: "commentVotes_thread_id_idx")
  @@index([user_id], map: "commentVotes_user_id_idx")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
}

model thread {
  id          String      @id @default(uuid())
  title       String
  description String?     @db.LongText
  authorId    String?
  flag        thread_flag @default(PUBLIC)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  communityId String?

  @@index([authorId], map: "Thread_authorId_idx")
  @@index([communityId], map: "Thread_communityId_idx")
}

model threadvotes {
  user_id    String
  thread_id  String
  vote       threadvotes_vote
  created_at DateTime         @default(now())
  updated_at DateTime         @default(now())

  @@id([user_id, thread_id])
  @@index([thread_id], map: "threadVotes_thread_id_idx")
  @@index([user_id], map: "threadVotes_user_id_idx")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum threadvotes_vote {
  UPVOTE
  DOWNVOTE
}

enum commentvotes_vote {
  UPVOTE
  DOWNVOTE
}

enum thread_flag {
  PUBLIC
  PRIVATE
  REPORTED
}
